import cv2
from matplotlib import pyplot as plt
image = cv2.imread("D:/cv/text.png", 0)  
template = cv2.imread("D:/cv/tree.jpeg", 0)  
result = cv2.matchTemplate(image, template, cv2.TM_CCOEFF_NORMED)
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
h, w = template.shape
top_left = max_loc
bottom_right = (top_left[0] + w, top_left[1] + h)
cv2.rectangle(image, top_left, bottom_right, 255, 2)
plt.subplot(1, 2, 1), plt.imshow(template, cmap='gray'), plt.title('Template')
plt.subplot(1, 2, 2), plt.imshow(image, cmap='gray'), plt.title('Matched Result')
plt.show()
import cv2
from matplotlib import pyplot as plt
image = cv2.imread("D:/cv/text.png", 0)  
template = cv2.imread("D:/cv/tree.jpeg", 0)  
sift = cv2.SIFT_create()
kp1, des1 = sift.detectAndCompute(image, None)
kp2, des2 = sift.detectAndCompute(template, None)
bf = cv2.BFMatcher()
matches = bf.knnMatch(des1, des2, k=2)
good_matches = []
for m, n in matches:
    if m.distance < 0.75 * n.distance:
        good_matches.append([m])
matched_img = cv2.drawMatchesKnn(image, kp1, template, kp2, good_matches, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
plt.imshow(matched_img)
plt.title('SIFT Feature Matching')
plt.show()
